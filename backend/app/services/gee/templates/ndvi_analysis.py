"""
NDVI Analysis Template

Google Earth Engine script template for NDVI (Normalized Difference Vegetation Index) analysis.
Calculates vegetation health and provides statistics for a given region of interest.

Template Variables:
- {roi_geometry}: GEE geometry object for the region of interest
- {primary_dataset}: Primary satellite dataset (e.g., COPERNICUS/S2_SR)
- {start_date}: Start date for image collection (YYYY-MM-DD)
- {end_date}: End date for image collection (YYYY-MM-DD)
- {max_cloud_cover}: Maximum cloud cover percentage
"""

NDVI_TEMPLATE = '''
// NDVI Analysis Script - Generated by GeoLLM
// Analysis Date: {analysis_date}
// Dataset: {primary_dataset}

var roi = {roi_geometry};
var startDate = '{start_date}';
var endDate = '{end_date}';
var maxCloudCover = {max_cloud_cover};

// Load and filter image collection
var collection = ee.ImageCollection('{primary_dataset}')
  .filterBounds(roi)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', maxCloudCover))
  .sort('system:time_start');

print('Total images found:', collection.size());

// Create median composite to reduce cloud effects
var composite = collection.median().clip(roi);

// Calculate NDVI using NIR and Red bands
// For Sentinel-2: B8 (NIR), B4 (Red)
// For Landsat: B5 (NIR), B4 (Red)
var ndvi = composite.normalizedDifference(['B8', 'B4']).rename('NDVI');

// Calculate comprehensive statistics
var ndviStats = ndvi.reduceRegion({{
  reducer: ee.Reducer.mean()
    .combine({{reducer2: ee.Reducer.min(), sharedInputs: true}})
    .combine({{reducer2: ee.Reducer.max(), sharedInputs: true}})
    .combine({{reducer2: ee.Reducer.stdDev(), sharedInputs: true}})
    .combine({{reducer2: ee.Reducer.percentile([25, 75]), sharedInputs: true}}),
  geometry: roi,
  scale: 10,  // 10m resolution for Sentinel-2
  maxPixels: 1e9,
  bestEffort: true
}});

// Count valid pixels
var pixelCount = ndvi.select('NDVI').reduceRegion({{
  reducer: ee.Reducer.count(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

// Calculate area of different vegetation health classes
var healthyVeg = ndvi.gt(0.6);  // Healthy vegetation
var moderateVeg = ndvi.gt(0.3).and(ndvi.lte(0.6));  // Moderate vegetation
var sparseVeg = ndvi.gt(0.1).and(ndvi.lte(0.3));   // Sparse vegetation
var bareGround = ndvi.lte(0.1);  // Bare ground/water

var pixelArea = ee.Image.pixelArea();
var healthyArea = pixelArea.multiply(healthyVeg).reduceRegion({{
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

var moderateArea = pixelArea.multiply(moderateVeg).reduceRegion({{
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

var sparseArea = pixelArea.multiply(sparseVeg).reduceRegion({{
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

var bareArea = pixelArea.multiply(bareGround).reduceRegion({{
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

// Calculate total ROI area
var totalArea = pixelArea.reduceRegion({{
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e9,
  bestEffort: true
}});

// Compile final results
var result = {{
  'analysis_type': 'ndvi',
  'processing_info': {{
    'dataset': '{primary_dataset}',
    'date_range': startDate + ' to ' + endDate,
    'max_cloud_cover': maxCloudCover,
    'image_count': collection.size(),
    'roi_area_m2': totalArea
  }},
  'ndvi_statistics': ndviStats,
  'pixel_count': pixelCount,
  'vegetation_classes_area_m2': {{
    'healthy_vegetation': healthyArea,
    'moderate_vegetation': moderateArea,
    'sparse_vegetation': sparseArea,
    'bare_ground': bareArea
  }},
  'ndvi_image': ndvi.getDownloadURL({{
    'region': roi,
    'scale': 10,
    'format': 'GeoTIFF'
  }})
}};

// Return the result
result;
'''

# Alternative templates for different use cases
SIMPLE_NDVI_TEMPLATE = '''
// Simple NDVI Analysis
var roi = {roi_geometry};
var collection = ee.ImageCollection('{primary_dataset}')
  .filterBounds(roi)
  .filterDate('{start_date}', '{end_date}')
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', {max_cloud_cover}));

var ndvi = collection.median().normalizedDifference(['B8', 'B4']).clip(roi);

var stats = ndvi.reduceRegion({{
  reducer: ee.Reducer.mean().combine({{
    reducer2: ee.Reducer.min(),
    sharedInputs: true
  }}).combine({{
    reducer2: ee.Reducer.max(),
    sharedInputs: true
  }}),
  geometry: roi,
  scale: 30,
  maxPixels: 1e9
}});

{{
  'ndvi_stats': stats,
  'analysis_type': 'simple_ndvi'
}};
'''

TEMPORAL_NDVI_TEMPLATE = '''
// Temporal NDVI Analysis
var roi = {roi_geometry};
var startDate = '{start_date}';
var endDate = '{end_date}';

var collection = ee.ImageCollection('{primary_dataset}')
  .filterBounds(roi)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', {max_cloud_cover}));

// Calculate monthly NDVI composites
var months = ee.List.sequence(1, 12);
var monthlyNDVI = months.map(function(month) {{
  var monthlyCollection = collection.filter(ee.Filter.calendarRange(month, month, 'month'));
  var ndvi = monthlyCollection.median().normalizedDifference(['B8', 'B4']);
  return ndvi.set('month', month);
}});

var monthlyStats = ee.ImageCollection(monthlyNDVI).map(function(img) {{
  var stats = img.reduceRegion({{
    reducer: ee.Reducer.mean(),
    geometry: roi,
    scale: 30,
    maxPixels: 1e9
  }});
  return ee.Feature(null, stats.set('month', img.get('month')));
}});

{{
  'monthly_ndvi_stats': monthlyStats.getInfo(),
  'analysis_type': 'temporal_ndvi'
}};
'''
